>
    -    /** ensure a cluster is form with {@link #nodes}.size() nodes, but do so by using the client of the specified node */
    +    /** ensure a cluster is formed with all published nodes, but do so by using the client of the specified node */
        private void validateClusterFormed(String viaNode) {
    -        final int size = nodes.size();
    -        logger.trace("validating cluster formed via [{}], expecting [{}]", viaNode, size);
    +        Set&lt;DiscoveryNode&gt; expectedNodes = new HashSet&lt;&gt;();
    +        for (NodeAndClient nodeAndClient : nodes.values()) {
    +            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode());
    +        }
    +        logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes);
            final Client client = client(viaNode);
    -        ClusterHealthResponse response = client.admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(size)).get();
    -        if (response.isTimedOut()) {
    -            logger.warn("failed to wait for a cluster of size [{}], got [{}]", size, response);
    -            throw new IllegalStateException("cluster failed to reach the expected size of [" + size + "]");
    +        try {
    +            if (awaitBusy(() -&gt; {
    +                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes();
    +                if (discoveryNodes.getSize() != expectedNodes.size()) {
    +                    return false;
    +                }
    +                for (DiscoveryNode expectedNode : expectedNodes) {
    +                    if (discoveryNodes.nodeExists(expectedNode) == false) {
    +                        return false;
    +                    }
    +                }
    +                return true;
    +            }, 30, TimeUnit.SECONDS) == false) {
    +                throw new IllegalStateException("cluster failed to from with expected nodes " + expectedNodes + " and actual nodes " +
    +                    client.admin().cluster().prepareState().get().getState().nodes());
    +            }
    +        } catch (InterruptedException e) {
    +            throw new IllegalStateException(e);
            }
        }
    