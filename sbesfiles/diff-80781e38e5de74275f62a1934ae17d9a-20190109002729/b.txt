>
          /** ensure a cluster is formed with all published nodes, but do so by using the client of the specified node */
        private void validateClusterFormed(String viaNode) {
              Set&lt;DiscoveryNode&gt; expectedNodes = new HashSet&lt;&gt;();
              for (NodeAndClient nodeAndClient : nodes.values()) {
                  expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode());
              }
              logger.trace("validating cluster formed via [{}], expecting {}", viaNode, expectedNodes);
            final Client client = client(viaNode);
              try {
                  if (awaitBusy(() -&gt; {
                      DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes();
                      if (discoveryNodes.getSize() != expectedNodes.size()) {
                          return false;
                      }
                      for (DiscoveryNode expectedNode : expectedNodes) {
                          if (discoveryNodes.nodeExists(expectedNode) == false) {
                              return false;
                          }
                      }
                      return true;
                  }, 30, TimeUnit.SECONDS) == false) {
                      throw new IllegalStateException("cluster failed to from with expected nodes " + expectedNodes + " and actual nodes " +
                          client.admin().cluster().prepareState().get().getState().nodes());
                  }
              } catch (InterruptedException e) {
                  throw new IllegalStateException(e);
            }
        }
    