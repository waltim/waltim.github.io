
            // Calculations. (depend on recommended destinations)
    -        final List&lt;Calculation&gt; calculations = new ArrayList&lt;&gt;(recommended.size());
    -        for (final Destination dest : recommended) {
    -            calculations.add(calculation.resolveTemplate("from", "Moon").resolveTemplate("to", dest.getDestination())
    -                    .request().get(Calculation.class));
    -        }
    +        final Map&lt;String, Calculation&gt; calculations = new HashMap&lt;&gt;();
    +        recommended.stream().forEach(destination -&gt; {
    +            try {
    +                calculations.put(destination.getDestination(), calculation.resolveTemplate("from", "Moon")
    +                        .resolveTemplate("to", destination.getDestination())
    +                        .request().get(Calculation.class));
    +            } catch (final Throwable throwable) {
    +                errors.offer("Calculation: " + throwable.getMessage());
    +            }
    +        });
    