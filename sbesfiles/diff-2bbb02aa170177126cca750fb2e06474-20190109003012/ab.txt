
        // Invoke the pattern matching method on each file.
        @Override
    -    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
    -        // If file cannot be read then throw IOException
    -        if (!Files.isReadable(file)) {
    -            throw new IOException("Cannot read " + file);
    +    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) throws IOException {
    +        Path relative = Paths.get(base.relativize(file.toUri()).getPath());
    +        if (excludeMatcher.stream().anyMatch(pathMatcher -&gt; pathMatcher.matches(relative))) {
    +            return FileVisitResult.CONTINUE;
            }
    -
    -        // Ensure only Swift files are linted
    -        if (entityOfInterest(file) &amp;&amp; file.toString().endsWith(".swift")) {
    -            fileNames.add(file.toAbsolutePath().toString());
    +        if ((isParentIncluded.getOrDefault(file.getParent(), false)
    +            || includeMatcher.stream().anyMatch(pathMatcher -&gt; pathMatcher.matches(relative)))
    +            &amp;&amp; (file.toFile().getCanonicalPath().endsWith(".swift") &amp;&amp; file.toFile().canRead())) {
    +            fileNames.add(file.toFile().getCanonicalPath());
            }
    -
    